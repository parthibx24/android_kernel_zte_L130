/*
 * File:shub_common.h
 * Author:bao.yue@spreadtrum.com
 * Created:2015-10-21
 * Description:Spreadtrum Sensor Hub Driver
 *
 * Copyright (C) 2015 Spreadtrum Communications Inc.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by
 * the Free Software Foundation.
 *
 */

#ifndef SHUB_COMMON_INCLUDE_H
#define SHUB_COMMON_INCLUDE_H

#include <linux/iio/iio.h>
#include <linux/irq_work.h>
#include <linux/workqueue.h>
#include "shub_protocol.h"

#define MAIN_VERSION	"2016_1116"
#define MODNAME				"[SensorHub]"
#undef pr_fmt
#define pr_fmt(fmt)  MODNAME"%s %d:" fmt, __func__, __LINE__
#define SH_FUN()        pr_info("\n")
#define SH_ERR(fmt, ...)  pr_err(fmt, ##__VA_ARGS__)
#define SH_LOG(fmt, ...)  pr_info(fmt, ##__VA_ARGS__)
#define SH_DBG(fmt, ...)  pr_debug(fmt, ##__VA_ARGS__)
#define TRANSFER_NODE		"/dev/spipe_pm0"
#define CALIBRATION_NODE	"/mnt/vendor/productinfo/sensor_calibration_data/"
/* cwm calibration data format */
#define CALIBRATION_DATA_LENGTH	30
#define CALIB_PATH_MAX_LENG		100

#define READ_BUFF_SIZE				128
#define SERIAL_READ_BUFFER_MAX	(128)
#define SERIAL_WRITE_BUFFER_MAX	(1024)

/* MUST equal to the iio total channel bytes size */
#define MAX_CM4_MSG_SIZE			(40)
#define SYNC_TIME_DELAY_MS		(10000)

/* dont open the macro,
 * system crash if sensor run long time
 */
#define SHUB_DATA_DUMP	0
#define SHUB_DEBUG_TS	0
/*
 * Description:
 * Define All kind of Sensors
 */
#define HANDLE_ANDROID_BASE				0
#define HANDLE_ANDROID_WAKEUP_BASE		0x32
#define HANDLE_CWMID_BASE					0x64
#define HANDLE_CWMID_WAKEUP_BASE		0x96
#define HANDLE_MCU_EVENT_BASE			0xC8
#define HANDLE_MAX						0xFF

enum android_sensor_id {
	ANDROID_SENSORS_ID_START = HANDLE_ANDROID_BASE,
	ANDROID_ACCELEROMETER,
	ANDROID_GEOMAGNETIC_FIELD,
	ANDROID_ORIENTATION,
	ANDROID_GYROSCOPE,
	ANDROID_LIGHT,
	ANDROID_PRESSURE,
	ANDROID_TEMPERATURE,
	ANDROID_PROXIMITY,
	ANDROID_GRAVITY,
	ANDROID_LINEAR_ACCELERATION,
	ANDROID_ROTATION_VECTOR,
	ANDROID_RELATIVE_HUMIDITY,
	ANDROID_AMBIENT_TEMPERATURE,
	ANDROID_MAGNETIC_FIELD_UNCALIBRATED,
	ANDROID_GAME_ROTATION_VECTOR,
	ANDROID_GYROSCOPE_UNCALIBRATED,
	ANDROID_SIGNIFICANT_MOTION,
	ANDROID_STEP_DETECTOR,
	ANDROID_STEP_COUNTER,
	ANDROID_GEOMAGNETIC_ROTATION_VECTOR,
	ANDROID_HEART_RATE,
	ANDROID_TILT_DETECTOR,
	ANDROID_WAKE_GESTURE,
	ANDROID_GLANCE_GESTURE,
	ANDROID_PICK_UP_GESTURE,
	ANDROID_WRIST_TILT_GESTURE,
	ANDROID_SENSORS_ID_END
};

enum android_wakeup_sensor_id {
	ANDROID_WAKE_UP_SENSOR_ID_START = HANDLE_ANDROID_WAKEUP_BASE,
	ANDROID_WAKE_UP_ACCELEROMETER,
	ANDROID_WAKE_UP_GEOMAGNETIC_FIELD,
	ANDROID_WAKE_UP_ORIENTATION,
	ANDROID_WAKE_UP_GYROSCOPE,
	ANDROID_WAKE_UP_LIGHT,
	ANDROID_WAKE_UP_PRESSURE,
	ANDROID_WAKE_UP_TEMPERATURE,
	ANDROID_WAKE_UP_PROXIMITY,
	ANDROID_WAKE_UP_GRAVITY,
	ANDROID_WAKE_UP_LINEAR_ACCELERATION,
	ANDROID_WAKE_UP_ROTATION_VECTOR,
	ANDROID_WAKE_UP_RELATIVE_HUMIDITY,
	ANDROID_WAKE_UP_AMBIENT_TEMPERATURE,
	ANDROID_WAKE_UP_MAGNETIC_FIELD_UNCALIBRATED,
	ANDROID_WAKE_UP_GAME_ROTATION_VECTOR,
	ANDROID_WAKE_UP_GYROSCOPE_UNCALIBRATED,
	ANDROID_WAKE_UP_SIGNIFICANT_MOTION,
	ANDROID_WAKE_UP_STEP_DETECTOR,
	ANDROID_WAKE_UP_STEP_COUNTER,
	ANDROID_WAKE_UP_GEOMAGNETIC_ROTATION_VECTOR,
	ANDROID_WAKE_UP_HEART_RATE,
	ANDROID_WAKE_UP_TILT_DETECTOR,
	ANDROID_WAKE_UP_WAKE_GESTURE,
	ANDROID_WAKE_UP_GLANCE_GESTURE,
	ANDROID_WAKE_UP_PICK_UP_GESTURE,
	ANDROID_WAKE_UP_WRIST_TILT_GESTURE,
	ANDROID_WAKE_UP_SENSOR_ID_END
};

enum cwm_sensor_id {
	ANDROID_CWM_SENSOR_ID_START = HANDLE_CWMID_BASE,
	ANDROID_CWM_SHAKE,
	ANDROID_CWM_TAP,
	ANDROID_CWM_FLIP,
	ANDROID_CWM_TWIST,
	ANDROID_CWM_POCKET_MODE,
	ANDROID_CWM_HAND_UP,
	ANDROID_CWM_HAND_DOWN,
	ANDROID_CWM_FACE_UP,
	ANDROID_CWM_FACE_DOWN,
	ANDROID_CWM_PRIVATE_SENSOR_A,
	ANDROID_CWM_CONTEXT_AWARENESS,
	ANDROID_CWM_STATIC_DETECTOR,
	ANDROID_CWM_VIRTUAL_GYRO,
	ANDROID_CWM_AIR_RECOGNITION,
	ANDROID_CWM_PDR,
	ANDROID_CWM_SENSOR_ID_END
};

enum cwm_wakeup_sensor_id {
	ANDROID_CWM_WAKE_UP_SENSOR_ID_START = HANDLE_CWMID_WAKEUP_BASE,
	ANDROID_CWM_WAKE_UP_SHAKE,
	ANDROID_CWM_WAKE_UP_TAP,
	ANDROID_CWM_WAKE_UP_FLIP,
	ANDROID_CWM_WAKE_UP_TWIST,
	ANDROID_CWM_WAKE_UP_POCKET_MODE,
	ANDROID_CWM_WAKE_UP_HAND_UP,
	ANDROID_CWM_WAKE_UP_HAND_DOWN,
	ANDROID_CWM_WAKE_UP_FACE_UP,
	ANDROID_CWM_WAKE_UP_FACE_DOWN,
	ANDROID_CWM_WAKE_UP_PRIVATE_SENSOR_A,
	ANDROID_CWM_WAKE_UP_CONTEXT_AWARENESS,
	ANDROID_CWM_WAKE_UP_STATIC_DETECTOR,
	ANDROID_CWM_WAKE_UP_VIRTUAL_GYRO,
	ANDROID_CWM_WAKE_UP_AIR_RECOGNITION,
	ANDROID_CWM_WAKE_UP_PDR,
	ANDROID_CWM_WAKE_UP_SENSOR_ID_END
};

enum android_mcu_to_cpu_event_type {
	ANDROID_SPECIAL_ID_START = HANDLE_MCU_EVENT_BASE,
	ANDROID_META_DATA,
	ANDROID_SYNC_SYS_REAL_TIME,
	ANDROID_MCU_REINITIAL,
	ANDROID_SPECIAL_ID_END
};
#endif
