/*
 * Copyright (C) 2012-2015 Spreadtrum Communications Inc.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef __CTL_ADC_H__
#define __CTL_ADC_H__

/* adc channel definition */
#define ADC_CHANNEL_INVALID	-1
#define SPRD_AUXADC_CAL_NO 0
#define SPRD_AUXADC_CAL_NV 1
#define SPRD_AUXADC_CAL_CHIP 2
#define SPRDBIG_AUXADC_CAL_CHIP 3
#define SPRDLIT_AUXADC_CAL_CHIP 4
#define ADC_CHANNEL_VBATSENSE	5
#define ADC_CHANNEL_SMALL_CAL	1
#define ADC_CHANNEL_MAX	32

enum sprd_pmic_adc_type {
	UNKNOWN_PMIC_ADC,
	SC2723_ADC,
	SC2731_ADC,
	SC2721_ADC,
	SC2720_ADC,
};

struct sprd_adc_cal {
	uint16_t p0_vol;	//4.2V
	uint16_t p0_adc;
	uint16_t p1_vol;	//3.6V
	uint16_t p1_adc;
	uint16_t cal_type;
};

struct adc_sample_data {
	int sample_num;		/* from 1 to 15 */
	int sample_bits;	/*0: 10bits mode, 1:12 bits mode */
	int signal_mode;	/*0:resistance,1:capacitance */
	int sample_speed;	/*0:quick mode, 1: slow mode */
	int scale;		/*0:little scale, 1:big scale */
	int hw_channel_delay;	/*0:disable, 1:enable */
	int channel_id;		/*channel id of software, Or dedicatid hw channel number */
	int mux;
	int channel_type;	/*0: software, 1: slow hardware , 2: fast hardware */
	int *pbuf;
};

struct pmic_adc_para {
	int small_adc_p0;
	int small_adc_p1;
	int small_vol_p0;
	int small_vol_p1;
	int small_cal_efuse_blk;
	int small_cal_efuse_bit;
	int big_adc_p0;
	int big_adc_p1;
	int big_vol_p0;
	int big_vol_p1;
	int big_cal_efuse_blk;
	int big_cal_efuse_bit;
	int blk_width;
	int adc_data_off;
};

struct sprd_pmic_adc {
	struct device	*dev;
	enum sprd_pmic_adc_type type;
	const struct sprd_chip_info *info;
	struct adc_sample_data *adc;
	struct regmap *regmap;
	struct mutex lock;
	struct hwspinlock *hw_lock;
	u32 channel_scale[ADC_CHANNEL_MAX];
	unsigned long adc_base;
	int channel;
	int scale;
	int voltage_ratio;
	int cal_type;
	int bigscale_cal_type;
	int litscale_cal_type;
	int sample;
};

enum adc_sc2731_channel {
	SC2731ADC_CHANNEL_0 = 0,
	SC2731ADC_CHANNEL_1 = 1,
	SC2731ADC_CHANNEL_2 = 2,
	SC2731ADC_CHANNEL_3 = 3,
	SC2731ADC_CHANNEL_4 = 4,
	SC2731ADC_CHANNEL_VBATSENSE = 5,
	SC2731ADC_CHANNEL_VCHGSEN = 6,
	SC2731ADC_CHANNEL_TYPEC_CC1 = 7,
	SC2731ADC_CHANNEL_FLOATING_8 = 8,
	SC2731ADC_CHANNEL_TYPEC_CC2 = 9,
	SC2731ADC_CHANNEL_FLOATING_A = 10,
	SC2731ADC_CHANNEL_FLOATING_B = 11,
	SC2731ADC_CHANNEL_FLOATING_C = 12,
	SC2731ADC_CHANNEL_DCDC_ARM0 = 13,
	SC2731ADC_CHANNEL_DCDC_ARM1 = 14,
	SC2731ADC_CHANNEL_DCDC_MEM = 15,
	SC2731ADC_CHANNEL_DCDC_GEN = 16,
	SC2731ADC_CHANNEL_DCDC_RF = 17,
	SC2731ADC_CHANNEL_DCDC_CORE = 18,
	SC2731ADC_CHANNEL_DCDC_WPA = 19,
	SC2731ADC_CHANNEL_DCDC_GPU = 20,
	SC2731ADC_CHANNEL_FLOATTING_E = 21,
	SC2731ADC_CHANNEL_FLOATTING_F = 22,
	SC2731ADC_CHANNEL_FLOATTING_10 = 23,
	SC2731ADC_CHANNEL_FLOATTING_11 = 24,
	SC2731ADC_CHANNEL_FLOATTING_12 = 25,
	SC2731ADC_CHANNEL_SDAVDD = 26,
	SC2731ADC_CHANNEL_HEADMIC_HEADMIC_IN = 27,
	SC2731ADC_CHANNEL_HEADMIC_GND_DET = 28,
	SC2731ADC_CHANNEL_HEADMIC_HEAD_DRO_L = 29,
	SC2731ADC_CHANNEL_HEADMIC_HEADSET_L_INT = 30,
	SC2731ADC_CHANNEL_HEADMIC_VDDVB = 31,
	SC2731ADC_CHANNEL_HEADMIC_VDDVO = 32,
	SC2731ADC_CHANNEL_HEADMIC_VDDPA = 33,
	SC2731ADC_CHANNEL_HEADMIC_CPVDD = 34,
	SC2731ADC_CHANNEL_HEADMIC_MICBIAS = 35,
	SC2731ADC_CHANNEL_HEADMIC_AUXMICBIAS = 36,
	SC2731ADC_CHANNEL_HEADMIC_HEADMICBIAS = 37,
	SC2731ADC_CHANNEL_DCDCLDO_VDDCAMIO = 38,
	SC2731ADC_CHANNEL_DCDCLDO_VDD1V8 = 39,
	SC2731ADC_CHANNEL_DCDCLDO_RF = 40,
	SC2731ADC_CHANNEL_DCDCLDO_VDDCAMD0 = 41,
	SC2731ADC_CHANNEL_DCDCLDO_VDDCAMD1 = 42,
	SC2731ADC_CHANNEL_DCDCLDO_VDDCON = 43,
	SC2731ADC_CHANNEL_DCDCLDO_VDDSRAM = 44,
	SC2731ADC_CHANNEL_VBATALDO_VDDCAMMOT = 45,
	SC2731ADC_CHANNEL_VBATALDO_VDD18DCXO = 46,
	SC2731ADC_CHANNEL_VBATDLDO_VDDSIM1 = 47,
	SC2731ADC_CHANNEL_VBATDLDO_VDDSIM0 = 48,
	SC2731ADC_CHANNEL_VBATDLDO_VDDCAMA1 = 49,
	SC2731ADC_CHANNEL_VBATALDO_VDD2V8 = 50,
	SC2731ADC_CHANNEL_VBATDLDO_VDDCAMA0 = 51,
	SC2731ADC_CHANNEL_VBATBLDO_VDDSD = 52,
	SC2731ADC_CHANNEL_VBATBLDO_VDDSDIO = 53,
	SC2731ADC_CHANNEL_VBATBLDO_VDDEMMCCORE = 54,
	SC2731ADC_CHANNEL_VBATBLDO_VDDUSB33 = 55,
	SC2731ADC_CHANNEL_VBATBLDO_VDDWIFIPA = 56,
	SC2731ADC_CHANNEL_VBATBLDO_VDDSIM2 = 57,
	SC2731ADC_CHANNEL_FLOATTING_18 = 58,
	SC2731ADC_CHANNEL_FLOATTING_19 = 59,
	SC2731ADC_CHANNEL_FLOATTING_1A = 60,
	SC2731ADC_CHANNEL_FLOATTING_1B = 61,
	SC2731ADC_CHANNEL_FLOATTING_1C = 62,
	SC2731ADC_CHANNEL_FLOATTING_1D = 63,
	SC2731ADC_CHANNEL_DP = 64,
	SC2731ADC_CHANNEL_DM = 65,
	SC2731ADC_MAX = 65,
};

enum adc_sc2721_channel {
	SC2721ADC_CHANNEL_0 = 0,
	SC2721ADC_CHANNEL_1 = 1,
	SC2721ADC_CHANNEL_2 = 2,
	SC2721ADC_CHANNEL_3 = 3,
	SC2721ADC_CHANNEL_4 = 4,
	SC2721ADC_CHANNEL_VBATSENSE = 5,
	SC2721ADC_CHANNEL_FLOATING_6 = 6,
	SC2721ADC_CHANNEL_TYPEC_CC1 = 7,
	SC2721ADC_CHANNEL_THM = 8,
	SC2721ADC_CHANNEL_TYPEC_CC2 = 9,
	SC2721ADC_CHANNEL_FLOATING_10 = 10,
	SC2721ADC_CHANNEL_FLOATING_11 = 11,
	SC2721ADC_CHANNEL_FLOATING_12 = 12,
	SC2721ADC_CHANNEL_DCDC_CPU = 13,
	SC2721ADC_CHANNEL_DCDC_MEM = 14,
	SC2721ADC_CHANNEL_DCDC_GEN = 15,
	SC2721ADC_CHANNEL_DCDC_CORE = 16,
	SC2721ADC_CHANNEL_DCDC_WPA = 17,
	SC2721ADC_CHANNEL_VCHGSEN = 18,
	SC2721ADC_CHANNEL_VCHG_BG = 19,
	SC2721ADC_CHANNEL_PROG2ADC = 20,
	SC2721ADC_CHANNEL_FLOATTING_17 = 21,
	SC2721ADC_CHANNEL_FLOATTING_18 = 22,
	SC2721ADC_CHANNEL_SDAVDD = 23,
	SC2721ADC_CHANNEL_HEADMIC_IN_DET = 24,
	SC2721ADC_CHANNEL_HEADMIC_L_INT = 25,
	SC2721ADC_CHANNEL_HEADMIC_VDDVB = 26,
	SC2721ADC_CHANNEL_HEADMIC_VDDPA = 27,
	SC2721ADC_CHANNEL_HEADMIC_MICBIAS = 28,
	SC2721ADC_CHANNEL_HEADMIC_HEADMICBIAS = 29,
	SC2721ADC_CHANNEL_LDO_CALOUT0 = 30,
	SC2721ADC_CHANNEL_LDO_CALOUT1 = 31,
	SC2721ADC_CHANNEL_LDO_CALOUT2 = 32,
	SC2721ADC_CHANNEL_FLOATTING_24 = 33,
	SC2721ADC_CHANNEL_FLOATTING_25 = 34,
	SC2721ADC_CHANNEL_FLOATTING_26 = 35,
	SC2721ADC_CHANNEL_FLOATTING_27 = 36,
	SC2721ADC_CHANNEL_FLOATTING_28 = 37,
	SC2721ADC_CHANNEL_FLOATTING_29 = 38,
	SC2721ADC_CHANNEL_DP = 39,
	SC2721ADC_CHANNEL_DM = 40,
	SC2721ADC_MAX = 40,
};

enum adc_sc2723_channel {
	SC2723ADC_CHANNEL_0 = 0,
	SC2723ADC_CHANNEL_1 = 1,
	SC2723ADC_CHANNEL_2 = 2,
	SC2723ADC_CHANNEL_3 = 3,
	SC2723ADC_CHANNEL_4 = 4,
	SC2723ADC_CHANNEL_VBATSENSE = 5,
	SC2723ADC_CHANNEL_VCHGSEN = 6,
	SC2723ADC_CHANNEL_VCHGBG = 7,
	SC2723ADC_CHANNEL_ISENSE = 8,
	SC2723ADC_CHANNEL_FLOATTING_9 = 9,
	SC2723ADC_CHANNEL_FLOATTING_10 = 10,
	SC2723ADC_CHANNEL_FLOATTING_11 = 11,
	SC2723ADC_CHANNEL_FLOATTING_12 = 12,
	SC2723ADC_CHANNEL_DCDC_ARM = 13,
	SC2723ADC_CHANNEL_DCDC_CORE = 14,
	SC2723ADC_CHANNEL_DCDC_MEM = 15,
	SC2723ADC_CHANNEL_DCDC_GEN = 16,
	SC2723ADC_CHANNEL_DCDC_RF = 17,
	SC2723ADC_CHANNEL_DCDC_CON = 18,
	SC2723ADC_CHANNEL_DCDC_WPA = 19,
	SC2723ADC_CHANNEL_FLOATTING_15 = 20,
	SC2723ADC_CHANNEL_FLOATTING_16 = 21,
	SC2723ADC_CHANNEL_FLOATTING_17 = 22,
	SC2723ADC_CHANNEL_FLOATTING_18 = 23,
	SC2723ADC_CHANNEL_VBATBK = 24,
	SC2723ADC_CHANNEL_LDO_DCXO = 25,
	SC2723ADC_CHANNEL_HEADMIC_HEADMIC_IN = 26,
	SC2723ADC_CHANNEL_HEADMIC_GND_DET = 27,
	SC2723ADC_CHANNEL_HEADMIC_HEAD_DRO_L = 28,
	SC2723ADC_CHANNEL_HEADMIC_HEADSET_L_INT = 29,
	SC2723ADC_CHANNEL_HEADMIC_VDDVB = 30,
	SC2723ADC_CHANNEL_HEADMIC_VDDVO = 31,
	SC2723ADC_CHANNEL_HEADMIC_VDDPA = 32,
	SC2723ADC_CHANNEL_HEADMIC_CPVDD = 33,
	SC2723ADC_CHANNEL_HEADMIC_MICBIAS = 34,
	SC2723ADC_CHANNEL_HEADMIC_AUXMICBIAS = 35,
	SC2723ADC_CHANNEL_HEADMIC_HEADMICBIAS = 36,
	SC2723ADC_CHANNEL_DCDCLDO_VDD1V8 = 37,
	SC2723ADC_CHANNEL_DCDCLDO_VDDCAMD = 38,
	SC2723ADC_CHANNEL_DCDCLDO_VDDCAMIO = 39,
	SC2723ADC_CHANNEL_DCDCLDO_RF0 = 40,
	SC2723ADC_CHANNEL_DCDCLDO_GEN1 = 41,
	SC2723ADC_CHANNEL_DCDCLDO_GEN0 = 42,
	SC2723ADC_CHANNEL_VBATDLDO_AVDD28 = 43,
	SC2723ADC_CHANNEL_VBATDLDO_VDDCAMA = 44,
	SC2723ADC_CHANNEL_VBATDLDO_VDDSIM2 = 45,
	SC2723ADC_CHANNEL_VBATDLDO_VDDSIM1 = 46,
	SC2723ADC_CHANNEL_VBATDLDO_VDDSIM0 = 47,
	SC2723ADC_CHANNEL_VBATALDO_VDDWIFIPA = 48,
	SC2723ADC_CHANNEL_VBATALDO_VDDCAMMOT = 49,
	SC2723ADC_CHANNEL_VBATALDO_VDDEMMCCORE = 50,
	SC2723ADC_CHANNEL_VBATALDO_VDDDCXO = 51,
	SC2723ADC_CHANNEL_VBATALDO_VDDSDCORE = 52,
	SC2723ADC_CHANNEL_VBATALDO_VDD2V8 = 53,
	SC2723ADC_CHANNEL_KPLED_VIBR_OUT = 54,
	SC2723ADC_CHANNEL_KPLED_OUT = 55,
	SC2723ADC_CHANNEL_OTP = 56,
	SC2723ADC_CHANNEL_LDODCDCIN_TOP = 57,
	SC2723ADC_CHANNEL_LDOVBAT_B_TOP = 58,
	SC2723ADC_CHANNEL_LDOVBAT_A_TOP = 59,
	SC2723ADC_CHANNEL_LDO_VDDSDIO = 60,
	SC2723ADC_CHANNEL_LDO_VDDSDUSB = 61,
	SC2723ADC_CHANNEL_LDO_VDDSD = 62,
	SC2723ADC_CHANNEL_DP = 63,
	SC2723ADC_CHANNEL_DM = 64,
	SC2723ADC_MAX = 64,
};

enum sprd_adc_channel {
	ADC_CHANNEL0 = 0,
	ADC_CHANNEL1 = 1,
	ADC_CHANNEL2 = 2,
	ADC_CHANNEL3 = 3,
	ADC_CHANNEL4 = 4,
	ADC_CHANNEL5 = 5,
	ADC_CHANNEL6 = 6,
	ADC_CHANNEL7 = 7,
	ADC_CHANNEL8 = 8,
	ADC_CHANNEL9 = 9,
	ADC_CHANNEL10 = 10,
	ADC_CHANNEL11 = 11,
	ADC_CHANNEL12 = 12,
	ADC_CHANNEL13 = 13,
	ADC_CHANNEL14 = 14,
	ADC_CHANNEL15 = 15,
	ADC_CHANNEL16 = 16,
	ADC_CHANNEL17 = 17,
	ADC_CHANNEL18 = 18,
	ADC_CHANNEL19 = 19,
	ADC_CHANNEL20 = 20,
	ADC_CHANNEL21 = 21,
	ADC_CHANNEL22 = 22,
	ADC_CHANNEL23 = 23,
	ADC_CHANNEL24 = 24,
	ADC_CHANNEL25 = 25,
	ADC_CHANNEL26 = 26,
	ADC_CHANNEL27 = 27,
	ADC_CHANNEL28 = 28,
	ADC_CHANNEL29  = 29,
	ADC_CHANNEL30 = 30,
	ADC_CHANNEL31 = 31,
	ADC_CHANNELMAX = 32,
};
#endif
